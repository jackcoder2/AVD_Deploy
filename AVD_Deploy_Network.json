{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "hubNetworkAddressSpace": {
      "type": "string",
      "metadata": {
        "description": "This is the address space for the hub virtual network, provided as a CIDR (10.120.112.0/20). This address space should be a 255.255.248.0 or CIDR /21 or larger subnet."
      }
    },
    "dnsServers": {
      "type": "array",
      "metadata": {
        "description": "Specify all DNS servers for this deployment, should be specified as an array of IP Addresses, [\"10.120.116.4\",\"10.120.116.5\"], for example."
      }
    },
    "enableFrontDoor": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable an Azure FrontDoor CDN service on the hub to create public endpoints for services in the hub virtual network, this is a billable option."
      }
    },
    "enableFirewall": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable an Azure Firewall service on the hub to create public endpoints for services in the hub virtual network, this is a billable option."
      }
    },
    "enableBastion": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable an Azure Bastion service on the hub to access virtual machines without a public IP address, this is a billable option."
      }
    }


  },
  "variables": {
    "Ver": "1.0.0.0",
    "DeploymentSpecificUniqueString": "[uniqueString(resourceGroup().id, subscription().tenantId)]",

    // --== Networking ==--
    "virtualNetworkName": "[concat('avd-virtualnetwork-hub-', resourceGroup().location)]",

    "networkAddressSpace": "[split(parameters('hubNetworkAddressSpace'),'.')]",

    "1st_octet": "[variables('networkAddressSpace')[0]]",
    "2nd_octet": "[variables('networkAddressSpace')[1]]",
    "3rd_octet": "[variables('networkAddressSpace')[2]]",

    "dnsServers": "[union(parameters('dnsServers'),array('168.63.129.16'))]",

    // --== Firewall subnet ==--
    "subnetFirewallName": "AzureFirewallSubnet",
    "subnetFirewallCIDR": "[concat(variables('1st_octet'),'.',variables('2nd_octet'),'.',int(variables('3rd_octet')),'.0/26')]",
    
    // --== Bastion subnet ==--
    "subnetBastionName": "AzureBastionSubnet",
    "subnetBastionCIDR": "[concat(variables('1st_octet'),'.',variables('2nd_octet'),'.',int(variables('3rd_octet')),'.64/26')]",

    // --== Services subnet ==--
    "subnetServicesName": "Services",
    "subnetServicesCIDR": "[concat(variables('1st_octet'),'.',variables('2nd_octet'),'.',add(int(variables('3rd_octet')),1),'.0/24')]",

    // --== Platform subnet ==--
    "subnetPlatformName": "Platform",
    "subnetPlatformCIDR": "[concat(variables('1st_octet'),'.',variables('2nd_octet'),'.',add(int(variables('3rd_octet')),2),'.0/24')]",

    // --== Directory subnet ==--
    "subnetDirectoryName": "Directory",
    "subnetDirectoryCIDR": "[concat(variables('1st_octet'),'.',variables('2nd_octet'),'.',add(int(variables('3rd_octet')),3),'.0/24')]",

    // --== Tenant subnet ==--
    "subnetTenantName": "Tenant",
    "subnetTenantCIDR": "[concat(variables('1st_octet'),'.',variables('2nd_octet'),'.',add(int(variables('3rd_octet')),4),'.0/24')]",

    // --== Network Security Rules ==--
    "InAllowSMB-nsg": [
      {
        "name": "In_Allow_SMB",
        "properties": {
          "description": "Allow common SMB traffic from any internal IP Address to a subnet",
          "protocol": "*",
          "access": "Allow",
          "priority": 160,
          "direction": "Inbound",
          "sourceAddressPrefix": "VirtualNetwork",
          "sourcePortRange": "*",
          "destinationAddressPrefix": "VirtualNetwork",
          "destinationPortRanges": [ "139", "445" ]
        }
      }
    ],
    "InAllowDirectory-nsg": [
      {
        "name": "In_Allow_Directory",
        "properties": {
          "description": "Allow common directory traffic from any internal IP Address to a subnet",
          "protocol": "*",
          "access": "Allow",
          "priority": 170,
          "direction": "Inbound",
          "sourceAddressPrefix": "VirtualNetwork",
          "sourcePortRange": "*",
          "destinationAddressPrefix": "VirtualNetwork",
          "destinationPortRanges": [ "53", "88", "135", "389", "464", "3268", "3269" ]
        }
      }
    ],
    "InDenyAll-nsg": [
      {
        "name": "In_Deny_All",
        "properties": {
          "description": "Deny all traffic",
          "protocol": "*",
          "access": "Deny",
          "priority": 4096,
          "direction": "Inbound",
          "sourceAddressPrefix": "*",
          "sourcePortRange": "*",
          "destinationAddressPrefix": "*",
          "destinationPortRange": "*"
        }
      }
    ],

    // --== Azure Firewall ==--
    "firewallName": "[concat(variables('virtualNetworkName'), '-firewall')]",

    // --== FrontDoor ==--
    "frontDoorName": "[concat(variables('virtualNetworkName'), '-frontdoor')]",
    "frontdoorWAFName": "[concat(variables('virtualNetworkName'), '-frontdoor-myrtille-waf')]",
    "fullQualifiedDomainName": "[concat('avd.',subscription().tenantId,'.cloudworkspace.app')]"
  },
  "resources": [
    // --== Azure Network Build ==--
    // Microsoft.Network/networkSecurityGroups - AzureFirewall subnet
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[concat(variables('subnetFirewallName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg')]",
      "apiVersion": "2022-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "securityRules": "[union(variables('InAllowSMB-nsg'), variables('InDenyAll-nsg'))]"
      },
      "condition": "[parameters('enableFirewall')]"
    },
    // Microsoft.Network/networkSecurityGroups - AzureBastion subnet
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[concat(variables('subnetBastionName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg')]",
      "apiVersion": "2022-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "securityRules": "[union(variables('InAllowSMB-nsg'), variables('InDenyAll-nsg'))]"
      },
      "condition": "[parameters('enableBastion')]"
    },
    // Microsoft.Network/networkSecurityGroups - Services subnet
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[concat(variables('subnetServicesName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg')]",
      "apiVersion": "2022-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "securityRules": "[union(variables('InAllowSMB-nsg'), variables('InDenyAll-nsg'))]"
      }
    },
    // Microsoft.Network/networkSecurityGroups - Platform subnet
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[concat(variables('subnetPlatformName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg')]",
      "apiVersion": "2022-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "securityRules": "[union(variables('InAllowSMB-nsg'), variables('InDenyAll-nsg'))]"
      }
    },
    // Microsoft.Network/networkSecurityGroups - Directory subnet
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[concat(variables('SubnetDirectoryName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg')]",
      "apiVersion": "2022-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "securityRules": "[union(variables('InAllowDirectory-nsg'), variables('InAllowSMB-nsg'), variables('InDenyAll-nsg'))]"
      }
    },
    // Microsoft.Network/networkSecurityGroups - Tenant subnet
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[concat(variables('subnetTenantName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg')]",
      "apiVersion": "2022-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "securityRules": "[union(variables('InAllowSMB-nsg'), variables('InDenyAll-nsg'))]"
      }
    },
    // Microsoft.Network/publicIPAddresses - Bastion
    {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[concat('hubVirtualNetwork-bastion-', variables('DeploymentSpecificUniqueString'),'-pip')]",
        "apiVersion": "2022-07-01",        
        "location": "[resourceGroup().location]",
        "tags": {},
        "sku": {
            "name": "Standard",
            "tier": "Regional"
        },
        "properties": {
            "publicIPAddressVersion": "IPv4",
            "publicIPAllocationMethod": "Static",
            "idleTimeoutInMinutes": 4,
            "ipTags": [],
            "ddosSettings": {
                "protectionMode": "VirtualNetworkInherited"
            }
        },
        "condition": "[parameters('enableBastion')]"
    },
    // Microsoft.Network/publicIPAddresses - Firewall
    {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[concat('hubVirtualNetwork-firewall-', variables('DeploymentSpecificUniqueString'),'-pip')]",
        "apiVersion": "2022-07-01",        
        "location": "[resourceGroup().location]",
        "tags": {},
        "sku": {
            "name": "Standard",
            "tier": "Regional"
        },
        "properties": {
            "publicIPAddressVersion": "IPv4",
            "publicIPAllocationMethod": "Static",
            "idleTimeoutInMinutes": 4,
            "ipTags": [],
            "ddosSettings": {
                "protectionMode": "VirtualNetworkInherited"
            }
        },
        "condition": "[parameters('enableFirewall')]"
    },
    // Microsoft.Network/publicIPAddresses - NATGateway
    {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[concat('hubVirtualNetwork-NATGateway-', variables('DeploymentSpecificUniqueString'),'-pip')]",
        "apiVersion": "2022-07-01",        
        "location": "[resourceGroup().location]",
        "tags": {},
        "sku": {
            "name": "Standard",
            "tier": "Regional"
        },
        "properties": {
            "natGateway": {
              "id": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Network/natGateways/OutboundNAT')]"
              },
            "publicIPAddressVersion": "IPv4",
            "publicIPAllocationMethod": "Static",
            "idleTimeoutInMinutes": 4,
            "ipTags": []
        },
        "condition": "[parameters('enableFirewall')]"
    },
    // Microsoft.Network/natGateways - NATGateway
    {
        "type": "Microsoft.Network/natGateways",
        "name": "[concat('hubVirtualNetwork-NATGateway-', variables('DeploymentSpecificUniqueString'),'-nat')]",
        "apiVersion": "2022-07-01",        
        "location": "[resourceGroup().location]",
        "tags": {},
        "sku": {
            "name": "Standard",
            "tier": "Regional"
        },
        "properties": {
            "idleTimeoutInMinutes": 4,
            "publicIpAddresses": [
                {
                    "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat('hubVirtualNetwork-NATGateway-', variables('DeploymentSpecificUniqueString'),'-pip'))]"
                }
            ]
        },
        "condition": "[parameters('enableFirewall')]",
        "dependsOn": [
          "[resourceId('Microsoft.Network/publicIPAddresses',concat('hubVirtualNetwork-NATGateway-', variables('DeploymentSpecificUniqueString'),'-pip'))]"
        ]
    },
    // Microsoft.Network/virtualNetworks
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "apiVersion": "2022-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[array(parameters('hubNetworkAddressSpace'))]"
        },
        "dhcpOptions": {
          "dnsServers": "[array(variables('dnsServers'))]"
        },
        "subnets": [
          {
            "name": "[variables('subnetFirewallName')]",
            "properties": {
              "addressPrefix": "[variables('subnetFirewallCIDR')]",
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('subnetBastionName')]",
            "properties": {
              "addressPrefix": "[variables('subnetBastionCIDR')]",
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('subnetServicesName')]",
            "properties": {
              "addressPrefix": "[variables('subnetServicesCIDR')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('subnetServicesName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg'))]"
              },
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('subnetPlatformName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPlatformCIDR')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('subnetPlatformName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg'))]"
              },
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('SubnetDirectoryName')]",
            "properties": {
              "addressPrefix": "[variables('subnetDirectoryCIDR')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('subnetDirectoryName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg'))]"
              },
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('subnetTenantName')]",
            "properties": {
              "addressPrefix": "[variables('subnetTenantCIDR')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('subnetTenantName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg'))]"
              },
              "natGateway": {
                "id": "[resourceId('Microsoft.Network/natGateways',concat('hubVirtualNetwork-NATGateway-', variables('DeploymentSpecificUniqueString'),'-nat'))]"
              },
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ],
        "virtualNetworkPeerings": [],
        "enableDdosProtection": false,
        "enableVmProtection": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('subnetTenantName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('subnetServicesName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('subnetPlatformName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('SubnetDirectoryName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg'))]",
        "[resourceId('Microsoft.Network/natGateways', concat('hubVirtualNetwork-NATGateway-', variables('DeploymentSpecificUniqueString'),'-nat'))]"
      ]
    },
    // Microsoft.Network/bastionHosts - virtualNetwork-Bastion
    {
        "type": "Microsoft.Network/bastionHosts",
        "name": "[concat(variables('virtualNetworkName'), '-Bastion')]",
        "apiVersion": "2022-07-01",        
        "location": "[resourceGroup().location]",
        "sku": {
            "name": "Basic"
        },
        "properties": {
            "dnsName": "bst-9d763906-5586-4561-bbc8-467e5d473026.bastion.azure.com",
            "scaleUnits": 2,
            "ipConfigurations": [
                {
                    "name": "IpConf",
                    "id": "[concat(resourceId('Microsoft.Network/bastionHosts', 'virtualNetwork-Bastion'), '/bastionHostIpConfigurations/IpConf')]",
                    "properties": {
                        "privateIPAllocationMethod": "Dynamic",
                        "publicIPAddress": {
                            "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat('hubVirtualNetwork-bastion-', variables('DeploymentSpecificUniqueString'),'-pip'))]"
                        },
                        "subnet": {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetBastionName'))]"
                        }
                    }
                }
            ]
        },
        "condition": "[parameters('enableBastion')]",
        "dependsOn": [
          "[resourceId('Microsoft.Network/publicIPAddresses',concat('hubVirtualNetwork-bastion-', variables('DeploymentSpecificUniqueString'),'-pip'))]",
          "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
        ]
    },




      // Microsoft.Cdn/profiles - FrontDoor
      {
        "type": "Microsoft.Cdn/profiles",
        "name": "[variables('frontDoorName')]",
        "apiVersion": "2022-11-01-preview",
        "location": "Global",
        "tags": {},
        "sku": {
          "name": "Standard_AzureFrontDoor"
        },
        "properties": {
          "originResponseTimeoutSeconds": 30,
          "extendedProperties": {}
        },
        "condition": "[parameters('enableFrontDoor')]"
      },
      // Microsoft.Cdn/profiles/afdendpoints - FrontDoor endpoints
      {
        "type": "Microsoft.Cdn/profiles/afdendpoints",
        "name": "[concat(variables('frontDoorName'), '/endpoint-', variables('DeploymentSpecificUniqueString'))]",
        "apiVersion": "2022-11-01-preview",
        "location": "Global",
        "properties": {
          "enabledState": "Enabled"
        },
        "condition": "[parameters('enableFrontDoor')]",
        "dependsOn": [
          "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]"
        ]
      },
      // Microsoft.Cdn/profiles/origingroups - FrontDoor avdFdBackendGroup
      {
        "type": "Microsoft.Cdn/profiles/origingroups",
        "name": "[concat(variables('frontDoorName'), '/avdFdBackendGroup')]",
        "apiVersion": "2022-11-01-preview",
        "properties": {
          "loadBalancingSettings": {
            "sampleSize": 4,
            "successfulSamplesRequired": 3,
            "additionalLatencyInMilliseconds": 50
          },
          "sessionAffinityState": "Disabled"
        },
        "condition": "[parameters('enableFrontDoor')]",
        "dependsOn": [
          "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]"
        ]
      },
      // Microsoft.Cdn/profiles/rulesets - FrontDoor SecurityHeaders
      {
        "type": "Microsoft.Cdn/profiles/rulesets",
        "name": "[concat(variables('frontDoorName'), '/SecurityHeaders')]",
        "apiVersion": "2022-11-01-preview",
        "condition": "[parameters('enableFrontDoor')]",
        "dependsOn": [
          "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]"
        ]
      },
      // Microsoft.Cdn/profiles/origingroups/origins - FrontDoor MyrtilleWebAppBackend
      {
        "type": "Microsoft.Cdn/profiles/origingroups/origins",
        "name": "[concat(variables('frontDoorName'), '/avdFdBackendGroup/MyrtilleWebAppBackend')]",
        "apiVersion": "2022-11-01-preview",
        "properties": {
          "hostName": "[variables('fullQualifiedDomainName')]",
          "httpPort": 80,
          "httpsPort": 443,
          "originHostHeader": "[variables('fullQualifiedDomainName')]",
          "priority": 1,
          "weight": 1000,
          "enabledState": "Enabled",
          "enforceCertificateNameCheck": true
        },
        "condition": "[parameters('enableFrontDoor')]",
        "dependsOn": [
          "[resourceId('Microsoft.Cdn/profiles/origingroups', variables('frontDoorName'), 'avdFdBackendGroup')]",
          "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]"
        ]
      },
      // Microsoft.Cdn/profiles/rulesets/rules - FrontDoor SecurityHeaders/SecurityHeaders1
      {
        "type": "Microsoft.Cdn/profiles/rulesets/rules",
        "name": "[concat(variables('frontDoorName'), '/SecurityHeaders/SecurityHeaders1')]",
        "apiVersion": "2022-11-01-preview",
        "properties": {
          "order": 0,
          "conditions": [
            {
              "name": "RequestScheme",
              "parameters": {
                "typeName": "DeliveryRuleRequestSchemeConditionParameters",
                "matchValues": [
                  "HTTPS"
                ],
                "operator": "Equal",
                "negateCondition": false,
                "transforms": []
              }
            }
          ],
          "actions": [
            {
              "name": "ModifyResponseHeader",
              "parameters": {
                "typeName": "DeliveryRuleHeaderActionParameters",
                "headerAction": "Append",
                "headerName": "x-frame-options",
                "value": "SAMEORIGIN"
              }
            },
            {
              "name": "ModifyResponseHeader",
              "parameters": {
                "typeName": "DeliveryRuleHeaderActionParameters",
                "headerAction": "Append",
                "headerName": "referrer-policy",
                "value": "SAMEORIGIN"
              }
            }
          ],
          "matchProcessingBehavior": "Continue"
        },
        "condition": "[parameters('enableFrontDoor')]",
        "dependsOn": [
          "[resourceId('Microsoft.Cdn/profiles/rulesets', variables('frontDoorName'), 'SecurityHeaders')]",
          "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]"
        ]
      },
      // Microsoft.Cdn/profiles/rulesets/rules - FrontDoor SecurityHeaders/SecurityHeaders2
      {
        "type": "Microsoft.Cdn/profiles/rulesets/rules",
        "name": "[concat(variables('frontDoorName'), '/SecurityHeaders/SecurityHeaders2')]",
        "apiVersion": "2022-11-01-preview",
        "properties": {
          "order": 1,
          "conditions": [
            {
              "name": "RequestScheme",
              "parameters": {
                "typeName": "DeliveryRuleRequestSchemeConditionParameters",
                "matchValues": [
                  "HTTPS"
                ],
                "operator": "Equal",
                "negateCondition": false,
                "transforms": []
              }
            }
          ],
          "actions": [
            {
              "name": "ModifyResponseHeader",
              "parameters": {
                "typeName": "DeliveryRuleHeaderActionParameters",
                "headerAction": "Append",
                "headerName": "strict-transport-security",
                "value": "max-age=31536000; includeSubDomains; preload"
              }
            },
            {
              "name": "ModifyResponseHeader",
              "parameters": {
                "typeName": "DeliveryRuleHeaderActionParameters",
                "headerAction": "Append",
                "headerName": "content-security-policy",
                "value": "default-src * data: blob: filesystem: about: ws: wss: 'unsafe-inline' 'unsafe-eval'; script-src * data: blob: 'unsafe-inline' 'unsafe-eval'; connect-src * data: blob: 'unsafe-inline'; img-src * data: blob: 'unsafe-inline'; frame-src * data: blob: ; style-src * data: blob: 'unsafe-inline'; font-src * data: blob: 'unsafe-inline'; frame-ancestors * data: blob:;"
              }
            },
            {
              "name": "ModifyResponseHeader",
              "parameters": {
                "typeName": "DeliveryRuleHeaderActionParameters",
                "headerAction": "Append",
                "headerName": "x-content-type-options",
                "value": "nosniff"
              }
            },
            {
              "name": "ModifyResponseHeader",
              "parameters": {
                "typeName": "DeliveryRuleHeaderActionParameters",
                "headerAction": "Append",
                "headerName": "permissions-policy",
                "value": "geolocation=(self \"https://*.azurefd.net\" \"https://*.pc.spot.io\" \"https://*.cloudworkspace.app\"), microphone=()"
              }
            }
          ],
          "matchProcessingBehavior": "Continue"
        },
        "condition": "[parameters('enableFrontDoor')]",
        "dependsOn": [
          "[resourceId('Microsoft.Cdn/profiles/rulesets', variables('frontDoorName'), 'SecurityHeaders')]",
          "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]"
        ]
      },
      // Microsoft.Network/frontdoorwebapplicationfirewallpolicies - FrontDoor
      {
        "type": "Microsoft.Network/frontdoorwebapplicationfirewallpolicies",
        "name": "[variables('frontdoorWAFName')]",
        "apiVersion": "2022-05-01",
        "location": "Global",
        "sku": {
          "name": "Standard_AzureFrontDoor"
        },
        "properties": {
          "policySettings": {
            "enabledState": "Enabled",
            "mode": "Prevention",
            "requestBodyCheck": "Enabled"
          },
          "customRules": {
            "rules": [
              {
                "name": "GeoBlacklist",
                "enabledState": "Enabled",
                "priority": 1001,
                "ruleType": "MatchRule",
                "rateLimitDurationInMinutes": 1,
                "rateLimitThreshold": 100,
                "matchConditions": [
                  {
                    "matchVariable": "RemoteAddr",
                    "operator": "GeoMatch",
                    "negateCondition": false,
                    "matchValue": [
                      "CN",
                      "RU"
                    ],
                    "transforms": []
                  }
                ],
                "action": "Block"
              },
              {
                "name": "Log4JQuery",
                "enabledState": "Disabled",
                "priority": 1200,
                "ruleType": "MatchRule",
                "rateLimitDurationInMinutes": 1,
                "rateLimitThreshold": 100,
                "matchConditions": [
                  {
                    "matchVariable": "QueryString",
                    "operator": "Contains",
                    "negateCondition": false,
                    "matchValue": [
                      "${",
                      "jndi",
                      "ldap"
                    ],
                    "transforms": [
                      "Lowercase"
                    ]
                  }
                ],
                "action": "Block"
              },
              {
                "name": "Log4JAgent",
                "enabledState": "Disabled",
                "priority": 1201,
                "ruleType": "MatchRule",
                "rateLimitDurationInMinutes": 1,
                "rateLimitThreshold": 100,
                "matchConditions": [
                  {
                    "matchVariable": "RequestHeader",
                    "selector": "User-Agent",
                    "operator": "Contains",
                    "negateCondition": false,
                    "matchValue": [
                      "${",
                      "dns"
                    ],
                    "transforms": [
                      "Lowercase"
                    ]
                  }
                ],
                "action": "Block"
              },
              {
                "name": "Log4JUri",
                "enabledState": "Disabled",
                "priority": 1202,
                "ruleType": "MatchRule",
                "rateLimitDurationInMinutes": 1,
                "rateLimitThreshold": 100,
                "matchConditions": [
                  {
                    "matchVariable": "RequestUri",
                    "operator": "Contains",
                    "negateCondition": false,
                    "matchValue": [
                      "${",
                      "dns"
                    ],
                    "transforms": [
                      "Lowercase"
                    ]
                  }
                ],
                "action": "Block"
              }
            ]
          },
          "managedRules": {
            "managedRuleSets": []
          }
        },
        "condition": "[parameters('enableFrontDoor')]"
      },
      // Microsoft.Cdn/profiles/securitypolicies - FrontDoor MyrtillePolicy
      {
        "type": "Microsoft.Cdn/profiles/securitypolicies",
        "name": "[concat(variables('frontDoorName'), '/MyrtillePolicy')]",
        "apiVersion": "2022-11-01-preview",
        "properties": {
          "parameters": {
            "wafPolicy": {
              "id": "[resourceId('Microsoft.Network/frontdoorwebapplicationfirewallpolicies', variables('frontdoorWAFName'))]"
            },
            "associations": [
              {
                "domains": [
                  {
                    "id": "[resourceId('Microsoft.Cdn/profiles/afdendpoints', concat(variables('frontDoorName'), '/endpoint-', variables('DeploymentSpecificUniqueString')))]"
                    // "[resourceId('Microsoft.Cdn/profiles/afdendpoints', variables('frontDoorName'), concat(variables('frontDoorName'), '/endpoint-', variables('DeploymentSpecificUniqueString')))]"
                  }
                ],
                "patternsToMatch": [
                  "/*"
                ]
              }
            ],
            "type": "WebApplicationFirewall"
          }
        },
        "condition": "[parameters('enableFrontDoor')]",
        "dependsOn": [
          "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]",
          //"[resourceId('Microsoft.Cdn/profiles/afdendpoints', variables('frontDoorName'), concat(variables('frontDoorName'), '/endpoint-', variables('DeploymentSpecificUniqueString')))]",
          "[resourceId('Microsoft.Cdn/profiles/afdendpoints', concat(variables('frontDoorName'), '/endpoint-', variables('DeploymentSpecificUniqueString')))]",
          "[resourceId('Microsoft.Network/frontdoorwebapplicationfirewallpolicies', variables('frontdoorWAFName'))]"
        ]
      },
      // Microsoft.Cdn/profiles/afdendpoints/routes - FrontDoor MyrtilleWebAppRoute
      {
        "type": "Microsoft.Cdn/profiles/afdendpoints/routes",
        "name": "[concat(variables('frontDoorName'), '/endpoint-',variables('DeploymentSpecificUniqueString'),'/MyrtilleWebAppRoute')]",
        "apiVersion": "2022-11-01-preview",
        "properties": {
          "customDomains": [],
          "originGroup": {
            "id": "[resourceId('Microsoft.Cdn/profiles/origingroups', variables('frontDoorName'), 'avdFdBackendGroup')]"
          },
          "ruleSets": [
            {
              "id": "[resourceId('Microsoft.Cdn/profiles/rulesets', variables('frontDoorName'), 'SecurityHeaders')]"
            }
          ],
          "supportedProtocols": [
            "Https"
          ],
          "patternsToMatch": [
            "/*"
          ],
          "forwardingProtocol": "MatchRequest",
          "linkToDefaultDomain": "Enabled",
          "httpsRedirect": "Enabled",
          "enabledState": "Enabled"
        },
        "condition": "[parameters('enableFrontDoor')]",
        "dependsOn": [
          //"[resourceId('Microsoft.Cdn/profiles/afdendpoints', variables('frontDoorName'), concat(variables('frontDoorName'), '/endpoint-', variables('DeploymentSpecificUniqueString')))]",
          "[resourceId('Microsoft.Cdn/profiles/afdendpoints', concat(variables('frontDoorName'), '/endpoint-', variables('DeploymentSpecificUniqueString')))]",
          "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]",
          "[resourceId('Microsoft.Cdn/profiles/origingroups', variables('frontDoorName'), 'avdFdBackendGroup')]",
          "[resourceId('Microsoft.Cdn/profiles/rulesets', variables('frontDoorName'), 'SecurityHeaders')]"
        ]
      },





    // Microsoft.Network/azureFirewalls - virtualNetwork-Firewall
    {
        "type": "Microsoft.Network/azureFirewalls",
        "name": "[variables('firewallName')]",
        "apiVersion": "2022-07-01",        
        "location": "[resourceGroup().location]",
        "properties": {
            "sku": {
                "name": "AZFW_VNet",
                "tier": "Standard"
            },
            "threatIntelMode": "Alert",
            "additionalProperties": {},
            "ipConfigurations": [
                {
                    "name": "ipConfig",
                    "id": "[concat(resourceId('Microsoft.Network/azureFirewalls', variables('firewallName')), '/azureFirewallIpConfigurations/ipConfig')]",
                    "properties": {
                        "publicIPAddress": {
                            "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat('hubVirtualNetwork-firewall-', variables('DeploymentSpecificUniqueString'),'-pip'))]"
                        },
                        "subnet": {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetFirewallName'))]"
                        }
                    }
                }
            ],
            "networkRuleCollections": [],
            "applicationRuleCollections": [],
            "natRuleCollections": []
        },
        "condition": "[parameters('enableFirewall')]",
        "dependsOn": [
          "[resourceId('Microsoft.Network/publicIPAddresses',concat('hubVirtualNetwork-firewall-', variables('DeploymentSpecificUniqueString'),'-pip'))]",
          "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
        ]
    }
  ],
  "outputs": {
  }
}