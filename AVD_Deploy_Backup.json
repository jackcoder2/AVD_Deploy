{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "hubNetworkAddressSpace": {
      "type": "string",
      "metadata": {
        "description": "This is the address space for the hub virtual network, provided as a CIDR (10.120.112.0/20). This address space should be a 255.255.248.0 or CIDR /21 or larger subnet."
      }
    },
    "dnsServers": {
      "type": "array",
      "metadata": {
        "description": "Specify all DNS servers for this deployment, should be specified as an array of IP Addresses, [\"10.120.116.4\",\"10.120.116.5\"], for example."
      }
    },
    "enableFirewall": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable an Azure Firewall service on the hub to create public endpoints for services in the hub virtual network, this is a billable option."
      }
    },
    "enableBastion": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable an Azure Bastion service on the hub to access virtual machines without a public IP address, this is a billable option."
      }
    }


  },
  "variables": {
    "Ver": "1.0.0.0",
    "DeploymentSpecificUniqueString": "[uniqueString(resourceGroup().id, subscription().tenantId)]",

    // --== Networking ==--
    "virtualNetworkName": "[concat('VirtualNetwork-AVD-', resourceGroup().location)]",

    "networkAddressSpace": "[split(parameters('hubNetworkAddressSpace'),'.')]",

    "1st_octet": "[variables('networkAddressSpace')[0]]",
    "2nd_octet": "[variables('networkAddressSpace')[1]]",
    "3rd_octet": "[variables('networkAddressSpace')[2]]",

    "dnsServers": "[union(parameters('dnsServers'),array('168.63.129.16'))]",

    // --== Firewall subnet ==--
    "subnetFirewallName": "AzureFirewallSubnet",
    "subnetFirewallCIDR": "[concat(variables('1st_octet'),'.',variables('2nd_octet'),'.',int(variables('3rd_octet')),'.0/26')]",
    
    // --== Bastion subnet ==--
    "subnetBastionName": "AzureBastionSubnet",
    "subnetBastionCIDR": "[concat(variables('1st_octet'),'.',variables('2nd_octet'),'.',int(variables('3rd_octet')),'.64/26')]",

    // --== Services subnet ==--
    "subnetServicesName": "Services",
    "subnetServicesCIDR": "[concat(variables('1st_octet'),'.',variables('2nd_octet'),'.',add(int(variables('3rd_octet')),1),'.0/24')]",

    // --== Platform subnet ==--
    "subnetPlatformName": "Platform",
    "subnetPlatformCIDR": "[concat(variables('1st_octet'),'.',variables('2nd_octet'),'.',add(int(variables('3rd_octet')),2),'.0/24')]",

    // --== Directory subnet ==--
    "subnetDirectoryName": "Directory",
    "subnetDirectoryCIDR": "[concat(variables('1st_octet'),'.',variables('2nd_octet'),'.',add(int(variables('3rd_octet')),3),'.0/24')]",

    // --== Tenant subnet ==--
    "subnetTenantName": "Tenant",
    "subnetTenantCIDR": "[concat(variables('1st_octet'),'.',variables('2nd_octet'),'.',add(int(variables('3rd_octet')),4),'.0/24')]",

    // --== Network Security Rules ==--
    "InAllowSMB-nsg": [
      {
        "name": "In_Allow_SMB",
        "properties": {
          "description": "Allow common SMB traffic from any internal IP Address to a subnet",
          "protocol": "*",
          "access": "Allow",
          "priority": 160,
          "direction": "Inbound",
          "sourceAddressPrefix": "VirtualNetwork",
          "sourcePortRange": "*",
          "destinationAddressPrefix": "VirtualNetwork",
          "destinationPortRanges": [ "139", "445" ]
        }
      }
    ],
    "InAllowDirectory-nsg": [
      {
        "name": "In_Allow_Directory",
        "properties": {
          "description": "Allow common directory traffic from any internal IP Address to a subnet",
          "protocol": "*",
          "access": "Allow",
          "priority": 170,
          "direction": "Inbound",
          "sourceAddressPrefix": "VirtualNetwork",
          "sourcePortRange": "*",
          "destinationAddressPrefix": "VirtualNetwork",
          "destinationPortRanges": [ "53", "88", "135", "389", "464", "3268", "3269" ]
        }
      }
    ],
    "InDenyAll-nsg": [
      {
        "name": "In_Deny_All",
        "properties": {
          "description": "Deny all traffic",
          "protocol": "*",
          "access": "Deny",
          "priority": 4096,
          "direction": "Inbound",
          "sourceAddressPrefix": "*",
          "sourcePortRange": "*",
          "destinationAddressPrefix": "*",
          "destinationPortRange": "*"
        }
      }
    ],

    // --== LogAnalytics ==--
    "logAnalyticsName": "[concat('logAnalytics-', variables('DeploymentSpecificUniqueString'))]",

    // --== Automation ==--
    "automationAccName": "[concat('automationAccount-', variables('DeploymentSpecificUniqueString'))]",
    "automationAccPrivateDNSName": "privatelink.azure-automation.net",

    // --== KeyVault ==--
    "keyVaultName": "[concat('keyVault-', variables('DeploymentSpecificUniqueString'))]",
    "keyVaultPrivateDNSName": "privatelink.vaultcore.azure.net",

    // --== Recovery Vault ==--
    "recoverVaultName": "[concat('recoveryVault-', variables('DeploymentSpecificUniqueString'))]",
    "recoveryVaultWus3PrivateDNSName": "privatelink.wus3.backup.windowsazure.com",
    "recoveryVaultBlobPrivateDNSName": "privatelink.blob.core.windows.net",
    "recoveryVaultQueuePrivateDNSName": "privatelink.queue.core.windows.net"
  },
  "resources": [
    // --== Azure Network Build ==--
    // Microsoft.Network/networkSecurityGroups - AzureFirewall subnet
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[concat(variables('subnetFirewallName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg')]",
      "apiVersion": "2022-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "securityRules": "[union(variables('InAllowSMB-nsg'), variables('InDenyAll-nsg'))]"
      },
      "condition": "[parameters('enableFirewall')]"
    },
    // Microsoft.Network/networkSecurityGroups - AzureBastion subnet
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[concat(variables('subnetBastionName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg')]",
      "apiVersion": "2022-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "securityRules": "[union(variables('InAllowSMB-nsg'), variables('InDenyAll-nsg'))]"
      },
      "condition": "[parameters('enableBastion')]"
    },
    // Microsoft.Network/networkSecurityGroups - Services subnet
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[concat(variables('subnetServicesName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg')]",
      "apiVersion": "2022-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "securityRules": "[union(variables('InAllowSMB-nsg'), variables('InDenyAll-nsg'))]"
      }
    },
    // Microsoft.Network/networkSecurityGroups - Platform subnet
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[concat(variables('subnetPlatformName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg')]",
      "apiVersion": "2022-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "securityRules": "[union(variables('InAllowSMB-nsg'), variables('InDenyAll-nsg'))]"
      }
    },
    // Microsoft.Network/networkSecurityGroups - Directory subnet
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[concat(variables('SubnetDirectoryName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg')]",
      "apiVersion": "2022-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "securityRules": "[union(variables('InAllowDirectory-nsg'), variables('InAllowSMB-nsg'), variables('InDenyAll-nsg'))]"
      }
    },
    // Microsoft.Network/networkSecurityGroups - Tenant subnet
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[concat(variables('subnetTenantName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg')]",
      "apiVersion": "2022-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "securityRules": "[union(variables('InAllowSMB-nsg'), variables('InDenyAll-nsg'))]"
      }
    },
    // Microsoft.Network/publicIPAddresses - Bastion
    {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[concat('hubVirtualNetwork-bastion-', variables('DeploymentSpecificUniqueString'),'-pip')]",
        "apiVersion": "2022-07-01",        
        "location": "[resourceGroup().location]",
        "tags": {},
        "sku": {
            "name": "Standard",
            "tier": "Regional"
        },
        "properties": {
            "publicIPAddressVersion": "IPv4",
            "publicIPAllocationMethod": "Static",
            "idleTimeoutInMinutes": 4,
            "ipTags": [],
            "ddosSettings": {
                "protectionMode": "VirtualNetworkInherited"
            }
        },
        "condition": "[parameters('enableBastion')]"
    },
    // Microsoft.Network/publicIPAddresses - Firewall
    {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[concat('hubVirtualNetwork-firewall-', variables('DeploymentSpecificUniqueString'),'-pip')]",
        "apiVersion": "2022-07-01",        
        "location": "[resourceGroup().location]",
        "tags": {},
        "sku": {
            "name": "Standard",
            "tier": "Regional"
        },
        "properties": {
            "publicIPAddressVersion": "IPv4",
            "publicIPAllocationMethod": "Static",
            "idleTimeoutInMinutes": 4,
            "ipTags": [],
            "ddosSettings": {
                "protectionMode": "VirtualNetworkInherited"
            }
        },
        "condition": "[parameters('enableFirewall')]"
    },
    // Microsoft.Network/publicIPAddresses - NATGateway
    {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[concat('hubVirtualNetwork-NATGateway-', variables('DeploymentSpecificUniqueString'),'-pip')]",
        "apiVersion": "2022-07-01",        
        "location": "[resourceGroup().location]",
        "tags": {},
        "sku": {
            "name": "Standard",
            "tier": "Regional"
        },
        "properties": {
            "natGateway": {
              "id": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Network/natGateways/OutboundNAT')]"
              },
            "publicIPAddressVersion": "IPv4",
            "publicIPAllocationMethod": "Static",
            "idleTimeoutInMinutes": 4,
            "ipTags": []
        }
    },
    // Microsoft.Network/natGateways - NATGateway
    {
        "type": "Microsoft.Network/natGateways",
        "name": "[concat('hubVirtualNetwork-NATGateway-', variables('DeploymentSpecificUniqueString'),'-nat')]",
        "apiVersion": "2022-07-01",        
        "location": "[resourceGroup().location]",
        "tags": {},
        "sku": {
            "name": "Standard",
            "tier": "Regional"
        },
        "properties": {
            "idleTimeoutInMinutes": 4,
            "publicIpAddresses": [
                {
                    "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat('hubVirtualNetwork-NATGateway-', variables('DeploymentSpecificUniqueString'),'-pip'))]"
                }
            ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/publicIPAddresses',concat('hubVirtualNetwork-NATGateway-', variables('DeploymentSpecificUniqueString'),'-pip'))]"
        ]
    },
    // Microsoft.Network/virtualNetworks
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "apiVersion": "2022-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[array(parameters('hubNetworkAddressSpace'))]"
        },
        "dhcpOptions": {
          "dnsServers": "[array(variables('dnsServers'))]"
        },
        "subnets": [
          {
            "name": "[variables('subnetFirewallName')]",
            "properties": {
              "addressPrefix": "[variables('subnetFirewallCIDR')]",
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('subnetBastionName')]",
            "properties": {
              "addressPrefix": "[variables('subnetBastionCIDR')]",
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('subnetServicesName')]",
            "properties": {
              "addressPrefix": "[variables('subnetServicesCIDR')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('subnetServicesName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg'))]"
              },
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('subnetPlatformName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPlatformCIDR')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('subnetPlatformName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg'))]"
              },
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('SubnetDirectoryName')]",
            "properties": {
              "addressPrefix": "[variables('subnetDirectoryCIDR')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('subnetDirectoryName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg'))]"
              },
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('subnetTenantName')]",
            "properties": {
              "addressPrefix": "[variables('subnetTenantCIDR')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('subnetTenantName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg'))]"
              },
              "natGateway": {
                "id": "[resourceId('Microsoft.Network/natGateways',concat('hubVirtualNetwork-NATGateway-', variables('DeploymentSpecificUniqueString'),'-nat'))]"
              },
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ],
        "virtualNetworkPeerings": [],
        "enableDdosProtection": false,
        "enableVmProtection": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('subnetTenantName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('subnetServicesName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('subnetPlatformName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('SubnetDirectoryName'), '-', variables('DeploymentSpecificUniqueString'),'-nsg'))]",
        "[resourceId('Microsoft.Network/natGateways', concat('hubVirtualNetwork-NATGateway-', variables('DeploymentSpecificUniqueString'),'-nat'))]"
      ]
    },
    // Microsoft.Network/bastionHosts - virtualNetwork-Bastion
    {
        "type": "Microsoft.Network/bastionHosts",
        "name": "[concat(variables('virtualNetworkName'), '-Bastion')]",
        "apiVersion": "2022-07-01",        
        "location": "[resourceGroup().location]",
        "sku": {
            "name": "Basic"
        },
        "properties": {
            "dnsName": "bst-9d763906-5586-4561-bbc8-467e5d473026.bastion.azure.com",
            "scaleUnits": 2,
            "ipConfigurations": [
                {
                    "name": "IpConf",
                    "id": "[concat(resourceId('Microsoft.Network/bastionHosts', 'virtualNetwork-Bastion'), '/bastionHostIpConfigurations/IpConf')]",
                    "properties": {
                        "privateIPAllocationMethod": "Dynamic",
                        "publicIPAddress": {
                            "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat('hubVirtualNetwork-bastion-', variables('DeploymentSpecificUniqueString'),'-pip'))]"
                        },
                        "subnet": {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetBastionName'))]"
                        }
                    }
                }
            ]
        },
        "condition": "[parameters('enableBastion')]",
        "dependsOn": [
          "[resourceId('Microsoft.Network/publicIPAddresses',concat('hubVirtualNetwork-bastion-', variables('DeploymentSpecificUniqueString'),'-pip'))]",
          "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
        ]
    },
    // Microsoft.Network/azureFirewalls - virtualNetwork-Firewall
    {
        "type": "Microsoft.Network/azureFirewalls",
        "name": "[concat(variables('virtualNetworkName'), '-Firewall')]",
        "apiVersion": "2022-07-01",        
        "location": "[resourceGroup().location]",
        "properties": {
            "sku": {
                "name": "AZFW_VNet",
                "tier": "Standard"
            },
            "threatIntelMode": "Alert",
            "additionalProperties": {},
            "ipConfigurations": [
                {
                    "name": "ipConfig",
                    "id": "[concat(resourceId('Microsoft.Network/azureFirewalls', 'virtualNetwork-Firewall'), '/azureFirewallIpConfigurations/ipConfig')]",
                    "properties": {
                        "publicIPAddress": {
                            "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat('hubVirtualNetwork-firewall-', variables('DeploymentSpecificUniqueString'),'-pip'))]"
                        },
                        "subnet": {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetFirewallName'))]"
                        }
                    }
                }
            ],
            "networkRuleCollections": [],
            "applicationRuleCollections": [],
            "natRuleCollections": []
        },
        "condition": "[parameters('enableFirewall')]",
        "dependsOn": [
          "[resourceId('Microsoft.Network/publicIPAddresses',concat('hubVirtualNetwork-firewall-', variables('DeploymentSpecificUniqueString'),'-pip'))]",
          "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
        ]
    },

    //  --== LogAnalytics Workspace with AMPLS ==--
    // microsoft.insights/privatelinkscopes - logAnalytics
    {
        "type": "microsoft.insights/privatelinkscopes",
        "apiVersion": "2021-07-01-preview",
        "name": "[concat(variables('logAnalyticsName'), '-privatelinkscope')]",
        "location": "global",
        "properties": {
            "accessModeSettings":{
                "exclusions": [],
                "queryAccessMode": "PrivateOnly",  // Open
                "ingestionAccessMode": "PrivateOnly" // Open
            }
        }
    },
    // Microsoft.OperationalInsights/workspaces - logAnalytics
    {
        "type": "Microsoft.OperationalInsights/workspaces",
        "apiVersion": "2022-10-01",
        "name": "[variables('logAnalyticsName')]",
        "location": "[resourceGroup().location]",
        "tags": {},
        "properties": {
          "sku": {
            "name": "pergb2018"
          },
          "features": {
            "immediatePurgeDataOn30Days": true,
            "searchVersion": 1
          },
          "publicNetworkAccessForIngestion": "Enabled",
          "publicNetworkAccessForQuery": "Enabled",
          "retentionInDays": 30
        }
    },
    // microsoft.insights/privatelinkscopes/scopedresources - logAnalytics
    {
        "type": "microsoft.insights/privatelinkscopes/scopedresources",
        "name": "[concat(variables('logAnalyticsName'), '-privatelinkscope/', variables('logAnalyticsName'), '-connection')]",
        "apiVersion": "2021-07-01-preview",
        "properties": {
            "linkedResourceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalyticsName'))]"
        },
        "dependsOn": [
            "[resourceId('microsoft.insights/privatelinkscopes', concat(variables('logAnalyticsName'), '-privatelinkscope'))]",
            "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalyticsName'))]"
        ]
    },


     // --== Automation Account Build ==--
    // Microsoft.Automation/automationAccounts
    {
      "type": "Microsoft.Automation/automationAccounts",
      "apiVersion": "2022-08-08",
      "name": "[variables('automationAccName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicNetworkAccess": false,
        "sku": {
          "name": "Basic"
        },
        "encryption": {
          "keySource": "Microsoft.Automation",
          "identity": {}
        }
      }
    },
    // Microsoft.Network/privateEndpoints
    {
        "type": "Microsoft.Network/privateEndpoints",
        "name": "[concat(variables('automationAccName'),'-private_endpoint')]",
        "apiVersion": "2022-07-01",            
        "location": "[resourceGroup().location]",
        "tags": {},
        "properties": {
            "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetServicesName'))]"
            },
            "privateLinkServiceConnections": [
                {
                    "name": "[concat(variables('automationAccName'),'-private_endpoint')]",
                    "properties": {
                        "privateLinkServiceId": "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccName'))]",
                         "groupIds": [
                            "DSCAndHybridWorker"
                        ]
                    }
                }
            ],
            "customNetworkInterfaceName": "[concat(variables('automationAccName'),'-private_endpoint-nic')]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccName'))]",
          "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
          ]
    },
    // Microsoft.Network/privateDnsZones
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[variables('automationAccPrivateDNSName')]",
      "location": "global",
      "properties": {},
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
      ]
    },
    // Microsoft.Network/privateDnsZones/virtualNetworkLinks
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('automationAccPrivateDNSName'), format('{0}-link', variables('automationAccPrivateDNSName')))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('automationAccPrivateDNSName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
      ]
    },
    // Microsoft.Network/privateEndpoints/privateDnsZoneGroups
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('automationAccName'),'-private_endpoint/DNSGroupName')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "config1",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('automationAccPrivateDNSName'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('automationAccPrivateDNSName'))]",
        "[resourceId('Microsoft.Network/privateEndpoints', concat(variables('automationAccName'),'-private_endpoint'))]"
      ]
    },
    // Microsoft.OperationalInsights/workspaces/linkedServices
    {
        "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
        "name": "[concat(variables('logAnalyticsName'), '/Automation')]",
        "apiVersion": "2020-08-01",
        "location": "[resourceGroup().location]",
        "properties": {
            "resourceId": "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccName'))]"
        },
        "dependsOn": [
            "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccName'))]"
        ]
    },
    // Microsoft.Automation/automationAccounts/providers/diagnosticSettings
    {
        "type": "Microsoft.Automation/automationAccounts/providers/diagnosticSettings",
        "name": "[concat(variables('automationAccName'), '/', 'Microsoft.Insights/service')]",
        "apiVersion": "2021-05-01-preview",
        "location": "[resourceGroup().location]",
        "properties": {
            "workspaceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalyticsName'))]",
            "logs": [
                {
                    "category": "JobLogs",
                    "enabled": true
                },
                {
                    "category": "JobStreams",
                    "enabled": true
                },
                {
                    "category": "DscNodeStatus",
                    "enabled": true
                },
                {
                    "category": "AuditEvent",
                    "enabled": true
                }
            ],
            "metrics": [
                {
                    "category": "AllMetrics",
                    "enabled": true
                }
            ]
        },
        "dependsOn": [
            "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccName'))]",
            "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalyticsName'))]"
        ]
    },
    // Microsoft.OperationalInsights/workspaces/savedSearches
    // {
    //     "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
    //     "name": "[concat(variables('logAnalyticsName'), '/Updates|MicrosoftDefaultComputerGroup_', variables('DeploymentSpecificUniqueString'))]",
    //     "apiVersion": "2020-08-01",
    //     "location": "[resourceGroup().location]",
    //     "properties": {
    //         "displayname": "MicrosoftDefaultComputerGroup",
    //         "category": "Updates",
    //         "query": "Heartbeat | where Computer in~ (\"\") or VMUUID in~ (\"\") | distinct Computer",
    //         "functionAlias": "Updates__MicrosoftDefaultComputerGroup",
    //         "tags": [
    //             {
    //                 "Name": "Group",
    //                 "Value": "Computer"
    //             }
    //         ]
    //     },
    //     "id": "[concat(resourceId('microsoft.operationalinsights/workspaces', variables('logAnalyticsName')), '/savedSearches/Updates|MicrosoftDefaultComputerGroup_', variables('DeploymentSpecificUniqueString'))]",
    //     "dependsOn": [
    //         "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalyticsName'))]"
    //     ]
    // },
    // Microsoft.OperationalInsights/workspaces/configurationScopes
    {
        "type": "Microsoft.OperationalInsights/workspaces/configurationScopes",
        "name": "[concat(variables('logAnalyticsName'), '/MicrosoftDefaultScopeConfig-Updates')]",
        "apiVersion": "2015-11-01-preview",
        "location": "[resourceGroup().location]",
        "kind": "SearchComputerGroup",
        "properties": {
            "Include": "[[\"Updates__MicrosoftDefaultComputerGroup\"]]"
        },
        "id": "[concat(resourceId('microsoft.operationalinsights/workspaces', variables('logAnalyticsName')), '/configurationScopes/MicrosoftDefaultScopeConfig-Updates')]",  //  /subscriptions/6b221c5d-c6a4-4852-bdc5-b5116abcd867/resourceGroups/AVDHub/providers/Microsoft.OperationalInsights/workspaces/logAnalytics-6jbubn4pofhx4/configurationScopes/MicrosoftDefaultScopeConfig-Updates
        "dependsOn": [
            "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalyticsName'))]"
        ]
    },
    // Microsoft.OperationsManagement/solutions
    {
        "type": "Microsoft.OperationsManagement/solutions",
        "name": "[concat('Updates(', variables('logAnalyticsName'), ')')]",
        "apiVersion": "2015-11-01-preview",
        "location": "[resourceGroup().location]",
        "plan": {
            "name": "[concat('Updates(', variables('logAnalyticsName'), ')')]",
            "product": "OMSGallery/Updates",
            "promotionCode": "",
            "publisher": "Microsoft"
        },
        "properties": {
            "workspaceResourceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalyticsName'))]",
            "configurations": [
                {
                    "Name": "SolutionTargeting",
                    "Value": "MicrosoftDefaultScopeConfig-Updates"
                }
            ]
        },
        "id": "[concat(resourceGroup().id, '/providers/Microsoft.OperationsManagement/solutions/Updates(', variables('logAnalyticsName'), ')')]", // "[Concat('/subscriptions/', parameters('subscriptionId'), '/resourceGroups/', resourceGroup().Name, '/providers/Microsoft.OperationsManagement/solutions/Updates(', variables('logAnalyticsName'), ')')]",
        "dependsOn": [
            "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalyticsName'))]"
        ]
    },

    //  --== KeyVault Build ==--
    // Microsoft.KeyVault/vaults - keyVault
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('keyVaultName')]",
      "apiVersion": "2022-07-01",      
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "Standard"
        },
        "tenantId": "[subscription().tenantId]",
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Deny",
          "ipRules": [],
          "virtualNetworkRules": []
        },
        "accessPolicies": [],
        "enabledForDeployment": true,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90,
        "publicNetworkAccess": "Disabled"
      }
    },
    // Microsoft.Network/privateEndpoints - keyVault
    {
        "type": "Microsoft.Network/privateEndpoints",
        "name": "[concat(variables('keyVaultName'),'-private_endpoint')]",
        "apiVersion": "2022-07-01",            
        "location": "[resourceGroup().location]",
        "tags": {},
        "properties": {
            "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetServicesName'))]"
            },
            "privateLinkServiceConnections": [
                {
                    "name": "[concat(variables('keyVaultName'),'-private_endpoint')]",
                    "properties": {
                        "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                         "groupIds": [
                            "vault"
                        ]
                    }
                }
            ],
            "customNetworkInterfaceName": "[concat(variables('keyVaultName'),'-private_endpoint-nic')]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
          "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
          ]
    },
    // Microsoft.Network/privateDnsZones - privatelink.vaultcore.azure.net
    {
      "type": "Microsoft.Network/privateDnsZones",
      "name": "[variables('keyVaultPrivateDNSName')]",
      "apiVersion": "2020-06-01",
      "location": "global",
      "properties": {},
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
      ]
    },
    // Microsoft.Network/privateDnsZones/virtualNetworkLinks - privatelink.vaultcore.azure.net
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('keyVaultPrivateDNSName'), format('{0}-link', variables('keyVaultPrivateDNSName')))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('keyVaultPrivateDNSName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
      ]
    },


    // Microsoft.RecoveryServices/vaults - recoveryVault
    {
      "type": "Microsoft.RecoveryServices/vaults",
      "name": "[variables('recoverVaultName')]",
      "apiVersion": "2023-01-01",      
      "location": "[resourceGroup().location]",
      "tags": {},
      "sku": {
        "name": "RS0",
        "tier": "Standard"
      },
      "properties": {
        "publicNetworkAccess": "Disabled"
      }
    },
    // Microsoft.Network/privateEndpoints - recoveryVault
    {
        "type": "Microsoft.Network/privateEndpoints",
        "name": "[concat(variables('recoverVaultName'),'-private_endpoint')]",
        "apiVersion": "2022-07-01",            
        "location": "[resourceGroup().location]",
        "tags": {},
        "properties": {
            "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetServicesName'))]"
            },
            "privateLinkServiceConnections": [
                {
                    "name": "[concat(variables('recoverVaultName'),'-private_endpoint')]",
                    "id": "[concat(resourceId('Microsoft.Network/privateEndpoints', concat(variables('recoverVaultName'),'-private_endpoint')), concat('/privateLinkServiceConnections/', concat(variables('recoverVaultName'),'-private_endpoint')))]",
                    "properties": {
                        "privateLinkServiceId": "[resourceId('Microsoft.RecoveryServices/vaults', variables('recoverVaultName'))]",
                         "groupIds": [
                            "AzureBackup"
                        ]
                    }
                }
            ],
            "customNetworkInterfaceName": "[concat(variables('recoverVaultName'),'-private_endpoint-nic')]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.RecoveryServices/vaults', variables('recoverVaultName'))]",
          "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
          ]
    },
    // Microsoft.Network/privateDnsZones - recoveryVault - privatelink.wus3.backup.windowsazure.com
    {
      "type": "Microsoft.Network/privateDnsZones",
      "name": "[variables('recoveryVaultWus3PrivateDNSName')]",
      "apiVersion": "2020-06-01",
      "location": "global",
      "properties": {},
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
      ]
    },
    // Microsoft.Network/privateDnsZones/virtualNetworkLinks - privatelink.wus3.backup.windowsazure.com
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "name": "[format('{0}/{1}', variables('recoveryVaultWus3PrivateDNSName'), format('{0}-link', variables('recoveryVaultWus3PrivateDNSName')))]",
      "apiVersion": "2020-06-01",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('recoveryVaultWus3PrivateDNSName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
      ]
    },
    // Microsoft.Network/privateDnsZones - recoveryVault - privatelink.blob.core.windows.net
    {
      "type": "Microsoft.Network/privateDnsZones",
      "name": "[variables('recoveryVaultBlobPrivateDNSName')]",
      "apiVersion": "2020-06-01",
      "location": "global",
      "properties": {},
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
      ]
    },
    // Microsoft.Network/privateDnsZones/virtualNetworkLinks - privatelink.blob.core.windows.net
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "name": "[format('{0}/{1}', variables('recoveryVaultBlobPrivateDNSName'), format('{0}-link', variables('recoveryVaultBlobPrivateDNSName')))]",
      "apiVersion": "2020-06-01",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('recoveryVaultBlobPrivateDNSName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
      ]
    },
    // Microsoft.Network/privateDnsZones - recoveryVault - privatelink.queue.core.windows.net
    {
      "type": "Microsoft.Network/privateDnsZones",
      "name": "[variables('recoveryVaultQueuePrivateDNSName')]",
      "apiVersion": "2020-06-01",
      "location": "global",
      "properties": {},
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
      ]
    },
    // Microsoft.Network/privateDnsZones/virtualNetworkLinks - privatelink.queue.core.windows.net
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "name": "[format('{0}/{1}', variables('recoveryVaultQueuePrivateDNSName'), format('{0}-link', variables('recoveryVaultQueuePrivateDNSName')))]",
      "apiVersion": "2020-06-01",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('recoveryVaultQueuePrivateDNSName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
      ]
    }
    // ,
    // // Microsoft.RecoveryServices/vaults/privateEndpointConnections
    // {
    //   "type": "Microsoft.RecoveryServices/vaults/privateEndpointConnections",
    //   "name": "[concat(variables('recoverVaultName'), '/', variables('recoverVaultName'), '-private_endpoint.connection')]",
    //   "apiVersion": "2023-01-01",            
    //   "location": "[resourceGroup().location]",
    //   "properties": {
    //     "provisioningState": "Succeeded",
    //     "privateEndpoint": {
    //       "id": "[resourceId('Microsoft.Network/privateEndpoints', concat(variables('recoverVaultName'),'-private_endpoint'))]"  // "[concat(resourceId('Microsoft.Network/privateEndpoints', concat(variables('recoverVaultName'),'-private_endpoint')), concat('/privateLinkServiceConnections/', concat(variables('recoverVaultName'),'-private_endpoint')))]"
    //     },
    //     "privateLinkServiceConnectionState": {
    //       "status": "Approved",
    //       "description": "None"
    //     }
    //   },
    //   "dependsOn": [
    //     "[resourceId('Microsoft.RecoveryServices/vaults', variables('recoverVaultName'))]"
    //   ]
    // }



  ],
  "outputs": {
  }
}